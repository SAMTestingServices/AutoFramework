// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace HIPAutomationTests.Bugs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("HUB-514 Ensure Analyse By types run without error")]
    [NUnit.Framework.CategoryAttribute("bugRegression")]
    public partial class HUB_514EnsureAnalyseByTypesRunWithoutErrorFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "HUB514-AnalyseBy.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "HUB-514 Ensure Analyse By types run without error", "\tHIP users observed errors when selecting from 11 Analyse By LOS types.\r\n\tThis re" +
                    "gression test checks the feature to confirm no errors recur", ProgrammingLanguage.CSharp, new string[] {
                        "bugRegression"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 9
#line 10
 testRunner.Given("I am logged into the Dr Foster website", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 11
 testRunner.And("I am viewing data as the Aintree University Hospital NHS Foundation Trust", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
 testRunner.And("I have selected HIP from the dashboard", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("LOS Analyse By dropdown items invoke reports without error")]
        public virtual void LOSAnalyseByDropdownItemsInvokeReportsWithoutError()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("LOS Analyse By dropdown items invoke reports without error", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line 9
this.FeatureBackground();
#line 15
 testRunner.Given("I select the Analysis tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
 testRunner.And("select the Drill Down menu option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "listItem"});
            table1.AddRow(new string[] {
                        "Length of Stay"});
            table1.AddRow(new string[] {
                        "Length of Stay (Superspell)"});
            table1.AddRow(new string[] {
                        "LOS (0 or 1 +)"});
            table1.AddRow(new string[] {
                        "LOS (1 week)"});
            table1.AddRow(new string[] {
                        "LOS (6 bands)"});
            table1.AddRow(new string[] {
                        "LOS (national quartile)"});
            table1.AddRow(new string[] {
                        "LOS (Post-Op)"});
            table1.AddRow(new string[] {
                        "LOS (Pre-Op)"});
            table1.AddRow(new string[] {
                        "LOS (S/S national quartile)"});
            table1.AddRow(new string[] {
                        "LOS (Short Stay)"});
            table1.AddRow(new string[] {
                        "LOS (Weekly)"});
#line 17
 testRunner.And("from the Analyse By dropdown select an Analyse By <listItem> previously seen to e" +
                    "rror", ((string)(null)), table1, "And ");
#line 30
 testRunner.Then("the corresponding Analyse By report should be produced without error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
